let id : (a : Type) -> S rt (a -> a) = \a => \x => x in
id Type Type



(a : Type) -> S rt (a -> a)



let Bool : Type = (B : ?) -> B -> B -> B in
let true : Bool = \B => \t => \f => t in
let false : Bool = \B => \t => \f => f in
let not : Bool -> Bool = \b => \B => \t => \f => b B f t in
Type



let List : Type -> Type
  = \A => (L : Type) -> (A -> L -> L) -> L -> L in

let nil : (A : Type) -> List A
  = \A => \L => \cons => \nil => nil in

let cons : (A : Type) -> A -> List A -> List A
  = \A => \x => \xs => \L => \cons => \nil => cons x (xs ? cons nil) in

Type



let Eq : (A : ?) -> A -> A -> Type
  = \A => \x => \y => (P : A -> Type) -> P x -> P y in

let refl : (A : ?) -> (x : A) -> Eq A x x
  = \A => \x => \P => \px => px in

let p : Eq Type Type Type = refl Type ((\x => x) Type) in

Type



let Nat  : Type = (N : Type) -> (N -> N) -> N -> N in
let five : Nat = \N => \s => \z => s (s (s (s (s z)))) in
let add  : Nat -> Nat -> Nat = \a => \b => \N => \s => \z => a N s (b N s z) in
let mul  : Nat -> Nat -> Nat = \a => \b => \N => \s => \z => a N (b N s) z in

let ten : Nat = add five five in
let hundred : Nat = mul ten ten in
let p : Eq hundred hundred = refl ? ? in
let q : Eq hundred (mul ten ten) = refl ? ? in

Type


render :: EditorState a -> T.Text
render (EditorState (Cursor focus path) _ side) =
  let
    sfocus = renderFocus focus
  in renderPath
    (case side of
      Left -> "\ESC[32;1m{\ESC[0m" <> sfocus <> "\ESC[32;1m]\ESC[0m"
      Right -> "\ESC[32;1m[\ESC[0m" <> sfocus <> "\ESC[32;1m}\ESC[0m")
    (simpleFocus focus)
    path
    <> "\ESC[0m" where
  renderFocus :: Focus a -> T.Text
  renderFocus focus = case focus of
    FName s -> T.pack s
    FTerm term -> renderTerm term
    FItem item -> renderItem item
    FCon (Con name ty) -> T.pack name <> " : " <> renderTerm ty
    FCon EditorBlankCon -> "\ESC[36;1m?\ESC[39m"
  renderTerm :: Term -> T.Text
  renderTerm term = case term of
    Lam names body -> "\ESC[35;1mλ\ESC[39m" <> snames (map unName names) <> " ⇒ " <> renderTerm body
    App lam args -> parenFocus (simple lam) (renderTerm lam) <> space args <> sterms args
    Var (Name s) -> T.pack s
    GVar (GName ns) -> mconcat $ intersperse "." $ reverse (map T.pack ns)
    Hole -> "\ESC[7m?\ESC[27m"
    Let (Name name) def defTy body -> renderLet (T.pack name) (renderTerm defTy) (renderTerm def) (renderTerm body)
    Pi (Name "_") inTy outTy -> parenFocus (simple inTy) (renderTerm inTy) <> " \ESC[36;1m→\ESC[39m " <> renderTerm outTy
    Pi (Name name) inTy outTy -> "\ESC[36;1mΠ\ESC[39m" <> T.pack name <> " : " <> renderTerm inTy <> ". " <> renderTerm outTy
    U0 -> "\ESC[36;1mU0\ESC[39m"
    U1 -> "\ESC[36;1mU1\ESC[39m"
    Code ty -> "\ESC[36;1mCode\ESC[39m " <> parenFocus (simple ty) (renderTerm ty)
    Quote e -> "\ESC[35;1m‹\ESC[39m" <> renderTerm e <> "\ESC[35;1m›\ESC[39m"
    Splice e -> "\ESC[35;1m~\ESC[39m" <> parenFocus (simple e) (renderTerm e)
    MkProd ty es -> "\ESC[35;1m#\ESC[39m" <> parenFocus (simple ty) (renderTerm ty) <> space es <> sterms es
    EditorBlank -> "\ESC[7m?\ESC[27m"
  renderItem :: Item -> T.Text
  renderItem item = case item of
    TermDef (Name n) ty body -> "\ESC[33;1mdef\ESC[39m " <> T.pack n <> " : " <> renderTerm ty <> " = " <> (indent $ renderTerm body)
    NamespaceDef (Name n) items -> "\ESC[33;1mnamespace\ESC[39m " <> T.pack n <> indentForced (sitems items)
    IndDef (Name n) ty cons -> "\ESC[33;1minductive\ESC[39m " <> T.pack n <> " : " <> renderTerm ty <> (indentForced $ scons (map (\(Name n, t) -> Con n t) cons))
    ProdDef (Name n) ty fields -> "\ESC[33;1mproduct\ESC[39m " <> T.pack n <> " : " <> renderTerm ty <> (indentForced $ sfields fields)
    EditorBlankDef -> "\ESC[7m?\ESC[27m"
  renderPath :: T.Text -> Bool -> Path a -> T.Text
  renderPath focus isSimple path = case path of
    PTop -> focus
    PLamBody up names -> renderPath ("\ESC[35;1mλ\ESC[39m" <> snames names <> " ⇒ " <> focus) False up
    PLamParams up ln rn body -> renderPath ("\ESC[35;1mλ\ESC[39m" <> snames ln <> focus <> snames rn <> " ⇒ " <> renderTerm body) False up
    PAppTerms up le re -> renderApp up le re isSimple focus
    PLetName up def defTy body -> renderPath (renderLet focus (renderTerm defTy) (renderTerm def) (renderTerm body)) False up
    PLetDef up name defTy body -> renderPath (renderLet (T.pack name) (renderTerm defTy) focus (renderTerm body)) False up
    PLetDefTy up name def body -> renderPath (renderLet (T.pack name) focus (renderTerm def) (renderTerm body)) False up
    PLetBody up name def defTy -> renderPath (renderLet (T.pack name) (renderTerm defTy) (renderTerm def) focus) False up
    PTermDefName up ty body -> renderPath ("\ESC[33;1mdef\ESC[39m " <> focus <> " : " <> renderTerm ty <> " = " <> indent (renderTerm body)) False up
    PTermDefTy up name body -> renderPath ("\ESC[33;1mdef\ESC[39m " <> T.pack name <> " : " <> focus <> " = " <> indent (renderTerm body)) False up
    PTermDefBody up name ty -> renderPath ("\ESC[33;1mdef\ESC[39m " <> T.pack name <> " : " <> renderTerm ty <> " = " <> indent focus) False up
    PNamespaceDefName up items -> renderPath ("\ESC[33;1mnamespace\ESC[39m " <> focus <> indentForced (sitems items)) False up
    PNamespaceDefItems up name li ri -> renderNamespace up (T.pack name) li ri focus
    PPiName up inTy outTy -> renderPath ("\ESC[36;1mΠ\ESC[39m" <> focus <> " : " <> renderTerm inTy <> ". " <> renderTerm outTy) False up
    PPiIn up name outTy -> renderPi up (T.pack name) focus isSimple (renderTerm outTy)
    PPiOut up name inTy -> renderPi up (T.pack name) (renderTerm inTy) (simple inTy) focus
    PCode up -> renderPath ("\ESC[36;1mCode\ESC[39m " <> parenFocus isSimple focus) False up
    PQuote up -> renderPath ("\ESC[35;1m‹\ESC[39m" <> focus <> "\ESC[35;1m›\ESC[39m") True up
    PSplice up -> renderPath ("\ESC[35;1m~\ESC[39m" <> parenFocus isSimple focus) isSimple up
    PIndDefName up ty cons -> renderPath ("\ESC[33;1minductive\ESC[39m " <> focus <> " : " <> renderTerm ty <> (indentForced $ scons cons)) False up
    PIndDefTy up name cons -> renderPath ("\ESC[33;1minductive\ESC[39m " <> T.pack name <> " : " <> focus <> (indentForced $ scons cons)) False up
    PIndDefCons up name ty lc rc -> renderCons up (T.pack name) ty lc rc focus
    PProdDefName up ty fs -> renderPath ("\ESC[33;1mproduct\ESC[39m " <> focus <> " : " <> renderTerm ty <> (indentForced $ sfields fs)) False up
    PProdDefTy up name fs -> renderPath ("\ESC[33;1mproduct\ESC[39m " <> T.pack name <> " : " <> focus <> (indentForced $ sfields fs)) False up
    PProdDefFields up name ty lf rf -> renderProd up name ty lf rf focus
    PMkProdTy up es -> renderPath ("\ESC[35;1m#\ESC[39m" <> parenFocus isSimple focus <> space es <> sterms es) (null es && isSimple) up
    PMkProdArgs up ty le re ->
      renderPath (
          "\ESC[35;1m#\ESC[39m" <> parenFocus (simple ty) (renderTerm ty) <>
          space (le ++ re ++ [undefined]) <>
          (sterms le <> space le <> parenFocus isSimple focus <> space re <> sterms re))
        False
        up
    PConName up ty -> renderPath (focus <> " : " <> renderTerm ty) False up
    PConTy up name -> renderPath (T.pack name <> " : " <> focus) False up

  renderCons up name ty lc rc focus = renderPath ("\ESC[33;1minductive\ESC[39m " <> name <> " : " <> renderTerm ty <> indentForced cons) False up
    where
      cons = scons lc <> focus <> newline rc <> scons rc
  renderPi up name inTy isSimpleInTy outTy = (\s -> renderPath s False up) $ case name of
      "_" -> parenFocus isSimpleInTy inTy <> " \ESC[36;1m→\ESC[39m " <> outTy
      _ -> "\ESC[36;1mΠ\ESC[39m" <> name <> " : " <> inTy <> ". " <> outTy
  renderProd up name ty lf rf focus =
    renderPath ("\ESC[33;1mproduct\ESC[39m " <> T.pack name <> " : " <> renderTerm ty <> (indentForced $ sfields lf <> newline lf <> focus <> newline rf <> sfields rf)) False up
  renderNamespace up name li ri focus = renderPath ("\ESC[33;1mnamespace\ESC[39m " <> name <> indentForced (sitems li <> newline li <> focus <> newline ri <> sitems ri)) False up
  renderLet name ty def body = "\ESC[33;1mlet\ESC[39m " <> name <> case (multiline ty, multiline def, multiline body) of
    (False, False, False) -> " : " <> ty <> " = " <> def <> inStringSpace <> body
    (False, False, True) -> " : " <> ty <> " = " <> def <> inString <> indent body
    (False, True, False) -> " : " <> ty <> "\n  =" <> indent2 def <> inStringSpace <> body
    (False, True, True) -> " : " <> ty <> "\n  =" <> indent2 def <> inString <> indent body
    (True, False, False) -> "\n  :" <> indent2 ty <> "\n  = " <> def <> inStringSpace <> body
    (True, False, True) -> "\n  :" <> indent2 ty <> "\n  = " <> def <> inString <> indent body
    (True, True, False) -> "\n  :" <> indent2 ty <> "\n  =" <> indent2 def <> inStringSpace <> body
    (True, True, True) -> "\n  :" <> indent2 ty <> "\n  =" <> indent2 def <> inString <> indent body
    where
      inString = "\n\ESC[33;1min\ESC[39m"
      inStringSpace = inString <> " "
  renderApp up le re isSimple focus = renderPath (sterms le <> space le <> parenFocus isSimple focus <> space re <> sterms re) False up
  parenFocus isSimple focus = if isSimple then focus else "(" <> focus <> ")"
  
  simpleFocus :: Focus a -> Bool
  simpleFocus focus = case focus of
    FName _ -> True
    FTerm term -> simple term
  
  simple term = case term of
    Var _ -> True
    Hole -> True
    U0 -> True
    U1 -> True
    GVar _ -> True
    Quote _ -> True
    Splice e -> simple e
    EditorBlank -> True
    _ -> False
  multiline s = length (T.lines s) /= 1
  space xs = case xs of
    [] -> ""
    _ -> " "
  newline cs = case cs of
    [] -> ""
    _ -> "\n"
  sfields fs = mconcat $ intersperse "\n" $ map renderTerm fs
  sterms es = case es of
    [] -> ""
    e:es ->
      let se = if simple e then renderTerm e else "(" <> renderTerm e <> ")"
      in se <> space es <> sterms es
  snames ns = mconcat $ intersperse " " (map T.pack ns)
  sitems is = case is of
    [] -> ""
    [i] -> renderItem i
    i:is -> renderItem i <> "\n" <> sitems is
  scons cs = case cs of
    [] -> ""
    (Con n ty):cs -> T.pack n <> " : " <> renderTerm ty <> "\n" <> scons cs
  indent :: T.Text -> T.Text
  indent s =
    if not (multiline s) then
      s
    else
      "\n" <> indentBase s
  indent2 :: T.Text -> T.Text
  indent2 s =
    if not (multiline s) then
      s
    else
      "\n" <> (indentBase . indentBase) s
  indentBase :: T.Text -> T.Text
  indentBase s =
    if not (multiline s) then
      s
    else
      (mconcat $ intersperse "\n" $ map ("  "<>) (T.lines s))
  indentForced :: T.Text -> T.Text
  indentForced s = (if s == "" then "" else "\n") <> (mconcat $ intersperse "\n" $ map ("  "<>) (T.lines s))