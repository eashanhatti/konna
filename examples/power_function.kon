inductive Nat : Type1
    Zero : Nat
    Succ : Nat -> Nat
    Dyn  : ^UInt

exp : Nat -> ^UInt -> ^UInt
exp n x = case n
    Zero   => x
    Succ m => <~x * ~(exp m x)>
    Dyn m  => <expDyn ~m ~x> 

expDyn : UInt ~> UInt ~> UInt
expDyn n x = case n of
    0 => x
    n => x * expDyn (n - 1) x


foo = exp (Succ (Succ (Succ Zero))) <5>

bar = exp (Succ (Succ (Dyn 3))) <6>

// After staging

expDyn : UInt ~> UInt ~> UInt
expDyn n x = case n of
    0 => 1
    n => x * expDyn (n - 1) x

foo = 5 * 5 * 5 * 1

bar = 6 * 6 * (expDyn 3 6)